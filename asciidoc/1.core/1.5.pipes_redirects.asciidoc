=== Pipes and redirects

Pipes are redirects are used very frequently in bash. This can cause a problem
in that they are used so often by all users of bash that many don't understand
their subtleties or how their full power.

This section will lay a firm foundation for you to understand these concepts
as we move onto deeper bash topics.

==== Basic Redirects

Start off by creating a file:

----
1$ mkdir lbthw_pipes_redirects
2$ cd lbthw_pipes_redirects
3$ echo "contents of file1" > file1
----

==== Basic pipes

Type this in:

----
4$ cat file1 | grep -c file
----

NOTE: if you don't know what grep is, you will need to learn. This is a good
place to start: https://en.wikipedia.org/wiki/Grep

Normally you'd run a grep with the filename as the last argument, but instead
here we 'pipe' the contents of file into the grep command by using the 'pipe'
operator: '|'.

A pipe takes the standard output of one command and passes it as the input
to another. What, then is standard output, really? You will find out soon!

----
5$ cat file2
----

What was the output of that?

Now run this, and try and guess the result before you run it:

----
6$ cat file2 | grep -c file
----

Was that what you expected? If it was, you can explain to the rest of the class
:)

If it wasn't, then the answer is related to standard output and other kinds of
output.

==== Standard output vs standard error

In addition to 'standard output', there is also a 'standard error' channel. When
you pass a non-existent file to the cat command, it throws an error message out
to the terminal. Although the message looks the same as the contents of a file,
it is in fact sent to a different output channel. In this case it's 'standard
error' rather than 'standard output'.

As a result, it is NOT passed through the pipe to the grep command, and grep
counts 0 matches in its output.

To the viewer of the terminal, there is no difference, but to bash there is
all the difference in the world!

There is a simpler way to refer to these channels. A number is assigned to each
of them by the operating system.

These are the numbered 'file descriptors', and the first three are assigned to
the numbers 0,1 and 2.

- 0 is 'standard input'
- 1 is 'standard output'
- 2 is 'standard error'

When you redirect standard output to a file, you use the redirection operator
'>'. Implicitly, you are using the '1' file descriptor.

Type this to see an example of redirecting '2', which is 'standard error'.

----
7$ command_does_not_exist
8$ command_does_not_exist 2> /dev/null
----

In the second line above 2 ('standard error') is directed to a file called
/dev/null

/dev/null is a special file, created by UNIX kernels. It is effectively a 
black hole into which data can be pumped: anything written to it will be
absorbed and ignored.

Another commonly seen redirection operator is '2>&1'.

----
9$ command_does_not_exist 2>&1
----

What this does is tell the shell to send the output on standard error (2) to
whatever standard output is pointed at at that point in the command.

Since standard output is pointed at the terminal at that time, standard error
is pointed at the terminal. From your point of view you see no difference,
since by default . But when we try and redirect to files things get interesting.

Now type these in and try and figure out why they produce different output:

----
10$ command_does_not_exist 2>&1 > outfile
11$ command_does_not_exist > outfile 2>&1
----

This is where things get tricky and you need to think carefully!

Remember that the redirection operator 2>&1 points (standard error) at whatever
1 (standard output) was pointed to at the time. If you read the first line
carefully, at the point 2>&1 was used, standard output was pointed at the terminal.
So standard error is pointed at the terminal. After that point, standard output
is redirected (with the '>' operator) to the file 'outfile'.

So at the end of all this, the standard error of the output of the command
'command_does_not_exist' points at the terminal, and the standard output points
at the file 'outfile'.

In the second line, what is different?

The order of redirections is changed. Now, the standard output of the command
'command_does_not_exist' is pointed at the file 'outfile', and the redirection
operator 2>&1 points 2 (standard error) to whatever 1 (standard output) is
pointed at. So in effect, both standard out and standard error are pointed at 
the file 

This pattern of sending all the output to a single file is seen very often, and
few understand why it has to be in that order. Once you understand, you will
never pause to think about which way round the operators should go again!

//http://sc.tamu.edu/help/general/unix/redirection.html

==== Difference between pipes and redirects

To recap:

- A pipe passes 'standard output' as the 'standard input' to another command
- A redirect sends a channel of output to a file

A couple of other commonly used operators are worth mentioning here:

----
12$ grep -c file < file1
----

The '<' operator redirects standard input to the command from a file, in this
case just as 'cat file1 | grep -c file' did.

----
13$ echo line1 > file3
14$ echo line2 > file3
15$ echo line3 >> file3
16$ cat file3
----

The first two lines above use the '>' operator, while the third one uses
the '>>' operator. The '>' operator effectively creates the file anew whether it
already exists or not. The '>>' operator, by contrast, appends to the end of the
file. As a result, only line2 and line3 are added to file3.


===== Cleanup

Now clean up what you just did:

----
17$ cd ..
18$ rm -rf lbthw_pipes_redirects
----


==== What you learned

- TODO

==== What Next?                                                                                                                                             
                                                                                                                                                            
TODO

==== Exercises

1) TODO
