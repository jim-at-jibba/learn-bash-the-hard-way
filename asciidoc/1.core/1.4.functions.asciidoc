=== Functions in Bash

From one angle, bash can be viewed as a programming language, albeit a quite
slow and primitive one.

One of the language features it has are the capability to create and call
functions.

This leads us onto the topic of what a 'command' can be in bash: function,
alias, program or 'builtin'.

==== Basic Functions

Start by creating a simple function

----
1$ function myfunc {
	echo Hello World
}
2$ myfunc
----

By declaring a function, and placing the block of code that needs to run inside
curly braces, you can then call that function on the command line as though
it were a program.

==== Arguments

Unlike other languages there is no checking of functions' arguments.

Predict the output of this, and then run it:

----
3$ function myfunc {
	echo $1
	echo $2
}
4$ myfunc "Hello World"
5$ myfunc Hello World
----

Can you explain the output?

Arguments to functions are numbered, from 1 to n. It's up to the function to
manage these arguments.

==== Variable Scope

Variables can have scope in bash. This is particularly useful in functions,
where you don't want your variables to be accessible from outside the function.

These commands illustrate this:

----
6$ function myfunc {
	echo $myvar
}
7$ myfunc
8$ myvar="Hi from outside the function"
9$ myfunc
----

Bash functions have no special scope. variables outside are visible to it.

There is, however, the capability within bash to declare a variable as local:

----
10$ function myfunc {
	local myvar="Hi from inside the function"
	echo $myvar
}
11$ myfunc
12$ echo $myvar
13$ local myvar="Will this work?"
----

The variable declared with 'local' is only viewed and accessed within the
function, and doesn't interfere with the outside.

'local' is an example of a bash 'builtin'. Now is a good time to talk about
the different types of commands.

==== Functions, Builtins, Aliases and Programs

Now is a good time to point out another area of bash which can cause confusion.

There are at least 4 ways to call commands in bash:

- Builtins
- Functions
- Programs
- Aliases

Let's take each one in turn.

===== Builtins

Builtins are commands that come 'built in' to the bash shell program. Normally
you can't easily tell the difference between a builtin, a program or a function,
but after reading this you will be able to.

Two such builtins are the familiar 'cd' and one called 'builtin'!

----
14$ builtin cd /tmp
15$ cd -
16$ builtin grep
17$ builtin notaprogram
----

As you've probably guessed from typing the above in, the 'builtin' builtin calls
the builtin program (this time 'cd'), and throws an error if no builtin exists

In case you didn't know 'cd -' returns you to the previous directory you were
in.

===== Functions

Functions we have covered above, but what happens if we write a function that
clashes with a builtin? What if you create a function called 'cd'?

----
18$ function cd() {
	echo 'No!'
}
19$ cd /tmp
20$ builtin cd /tmp
21$ cd -
22$ unset -f cd
23$ cd /tmp
24$ cd -
----

At the end there you 'unset' the function 'cd'. 'unset' is also . You can also
'unset -v' a variable. Or just leave the -v out, as it will assume you mean 
a variable by default.

----
25$ declare -f
26$ declare -F
----

If you want to know what functions are set in your environment, run
'declare -f'.  This will output the functions and their bodies, so if you just
want the names, use the '-F' flag.

===== Programs

Programs are executable files. Commonly-used examples of these are programs such as 'grep', 'sed', 'vi' and so on.

How do you tell whether a command is a 

First, see whether it's a builtin by running 'builtin <command>' as you did before. Then you can also run the 'which' command to determine where the file is on your filesystem.

----
27$ which grep
28$ which cd
29$ which builtin
30$ which doesnotexist
----

Is 'which' a builtin or a program? 


===== Aliases

Finally there are aliases. Aliases are strings that the shell takes and translates to whatever that string is aliased to.

Try this and explain what is going on as you go:

----
31$ alias cd=doesnotexist
32$ alias
33$ cd
34$ unalias cd
35$ cd /tmp
36$ cd -
37$ alias
----

And yes, you can alias alias.

==== What you learned

-  TODO

==== Exercises

1) Run typeset -f TODO
2) alias alias, override cd. Try and break things. Have fun. If you get stuck,
close down your terminal, or exit your bash shell (if you haven't overridden
exit!).

