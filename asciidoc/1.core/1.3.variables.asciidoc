=== Variables in Bash

As in any programming environment, variables are critical to an understanding
of bash. In this section you'll learn about variables in bash and some of their
subtleties.

==== Basic Variables

Start by creating a variable and echoing it.

----
$ MYSTRING=astring
$ echo $MYSTRING
----

Simple enough: you create a variable by stating its name, immediately adding an
equals sign, and then immediately stating the value.

Variables don't need to be capitalised, but they generally are by convention.

To get the value out of the variable, you have to use the dollar sign to tell
bash that you want the variable dereferenced.

==== Variables and Quoting

Things get more interesting when you start quoting.

Quoting used to group different 'words' into a variable value:

----
$ MYSENTENCE=A sentence
$ MYSENTENCE="A sentence"
$ echo $MYSENTENCE
----

Since (by default) the shell reads each word in separated by a space, it thinks
the word 'sentence' is not related to the variable assigment, and treats it as a 
program. To get the sentence into the variable with the space is in it, you can
enclose it in the double quotes, as above.

Things get more interesting when we embed other variables in the quoted string:

----
$ MYSENTENCE="A sentence with $MYSTRING in it"
$ MYSENTENCE='A sentence with $MYSTRING in it'
----

If you were expecting similar behaviour to the previous section you may have got
a surprise!

This illustrated an important point if you're reading shell scripts: the bash
shell translates the variable into its value if it's in double quotes, but
does not if it's in single quotes.

Remember from the previous section that this is not true when globbing! Globs
are not expanded when in either single or double quotes. Confusing isn't it?

==== Shell Variables

Some variables are special, and set up when bash starts:

----
$ echo $PPID          # Line 1
$ PPID=nonsense       # Line 2
$ echo $PPID          # Line 3
----

- Line 1 - PPID is a special variable set by the bash shell. It contains the bash's parent process id.
- Line 2 - Try and set the PPID variable to something else.
- Line 3 - Output PPID again.

What happened there?

If you want to make a readonly variable, put 'readonly' in front of it, like
this:

---- 
$ readonly MYVAR=astring
$ MYVAR=anotherstring
----

==== env

Wherever are you, you can see the variables 

----
$ env
----



==== export

----
$ MYSTRING=astring
$ bash
$ echo $MYSTRING
$ exit
$ export MYSTRING=anothermystring
$ bash
$ echo $MYSTRING
----


==== Arrays

BASH_VERSINFO - read-only array


===== Cleanup

Now clean up what you just did:

----
$ cd -                      # Line 1
$ rm -rf lbthw_tmp          # Line 2
----


==== What you learned

- 

==== Exercises

1) TODO
