=== Variables in Bash

As in any programming environment, variables are critical to an understanding
of bash. In this section you'll learn about variables in bash and some of their
subtleties.

==== Basic Variables

Start by creating a variable and echoing it.

----
$ MYSTRING=astring
$ echo $MYSTRING
----

Simple enough: you create a variable by stating its name, immediately adding an
equals sign, and then immediately stating the value.

Variables don't need to be capitalised, but they generally are by convention.

To get the value out of the variable, you have to use the dollar sign to tell
bash that you want the variable dereferenced.

==== Variables and Quoting

Things get more interesting when you start quoting.

Quoting used to group different 'words' into a variable value:

----
$ MYSENTENCE=A sentence
$ MYSENTENCE="A sentence"
$ echo $MYSENTENCE
----

Since (by default) the shell reads each word in separated by a space, it thinks
the word 'sentence' is not related to the variable assigment, and treats it as a 
program. To get the sentence into the variable with the space is in it, you can
enclose it in the double quotes, as above.

Things get more interesting when we embed other variables in the quoted string:

----
$ MYSENTENCE="A sentence with $MYSTRING in it"
$ MYSENTENCE='A sentence with $MYSTRING in it'
----

If you were expecting similar behaviour to the previous section you may have got
a surprise!

This illustrated an important point if you're reading shell scripts: the bash
shell translates the variable into its value if it's in double quotes, but
does not if it's in single quotes.

Remember from the previous section that this is not true when globbing! Globs
are not expanded when in either single or double quotes. Confusing isn't it?

==== Shell Variables

Some variables are special, and set up when bash starts:

----
$ echo $PPID          # Line 1
$ PPID=nonsense       # Line 2
$ echo $PPID          # Line 3
----

- Line 1 - PPID is a special variable set by the bash shell. It contains the bash's parent process id.
- Line 2 - Try and set the PPID variable to something else.
- Line 3 - Output PPID again.

What happened there?

If you want to make a readonly variable, put 'readonly' in front of it, like
this:

---- 
$ readonly MYVAR=astring
$ MYVAR=anotherstring
----

==== env

Wherever you are, you can see the variables that are set by running this:

----
$ env
TERM_PROGRAM=Apple_Terminal
TERM=xterm-256color
SHELL=/bin/bash
HISTSIZE=1000000
TMPDIR=/var/folders/mt/mrfvc55j5mg73dxm9jd3n4680000gn/T/
PERL5LIB=/home/imiell/perl5/lib/perl5
GOBIN=/space/go/bin
Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.2BE31oXVrF/Render
TERM_PROGRAM_VERSION=361.1
PERL_MB_OPT=--install_base "/home/imiell/perl5"
TERM_SESSION_ID=07101F8B-1F4C-42F4-8EFF-1E8003E8A024
HISTFILESIZE=1000000
USER=imiell
SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.uNwbe2XukJ/Listeners
__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0
PATH=/home/imiell/perl5/bin:/opt/local/bin:/opt/local/sbin:/Users/imiell/google-cloud-sdk/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/space/git/shutit:/space/git/work/bin:/space/git/home/bin:~/.dotfiles/bin:/space/go/bin
PWD=/space/git/work/home/finances/tax/tax_returns/ian/self_employed_income/2016-2017/manning
LANG=en_GB.UTF-8
XPC_FLAGS=0x0
HISTCONTROL=ignoredups:ignorespace
XPC_SERVICE_NAME=0
HOME=/Users/imiell
SHLVL=2
PERL_LOCAL_LIB_ROOT=/home/imiell/perl5
LOGNAME=imiell
GOPATH=/space/go
DISPLAY=/private/tmp/com.apple.launchd.lwUJWwBy9y/org.macosforge.xquartz:0
SECURITYSESSIONID=186a7
PERL_MM_OPT=INSTALL_BASE=/home/imiell/perl5
HISTTIMEFORMAT=%d/%m/%y %T 
HISTFILE=/home/imiell/.bash_history
_=/usr/bin/env
OLDPWD=/Users/imiell/Downloads
----

The output will be different wherever you run it.


==== export

Type in these commands, and try to predict what will happen:

----
$ MYSTRING=astring
$ bash
$ echo $MYSTRING
$ exit
$ echo $MYSTRING
$ unset MYSTRING
$ echo $MYSTRING
$ export MYSTRING=anotherstring
$ bash
$ echo $MYSTRING
$ exit
----

Based on this, what do you think export does?

You've already seen that a variable set in a bash terminal can be referenced
later by using the dollar sign.

But what happens when you set a variable, and then start up another process?

In this case, you set a variable (MYSTRING) to the value "astring", and then
start up a new bash shell process. Within that bash shell process, MYSTRING
does not exist, so an error is thrown. In other words, the variable was not
inherited by the bash process you just started.

After exiting that bash session, and unsetting the MYSTRING variable to ensure
it's gone, you set it again, but this time 'export' the variable, so that any
processes started by the running shell will have it in their environment. You
show this by starting up another bash shell, and it 'echo's the new value
"anotherstring" to the terminal.

It's not just shells that have environment variables! All processes have
environment variables.


==== Arrays

BASH_VERSINFO - read-only array


==== What you learned

- TODO

==== Exercises

1) Take the output of 'env' in your shell and work out why each item is there
and what it might be used by. You may want to use 'man bash', or use google to
figure it out. Or you could try re-setting it and see what happens.

2) 
