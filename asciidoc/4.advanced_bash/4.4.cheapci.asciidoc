== Example Bash Script

To finish off the course, we're going to look at a slightly larger bash
project to demonstrate the techniques learned in this course in a more
pracitcal context.

=== Cheapci

'Cheapci' is a bash script I wrote in an effort to understand what Jenkins was
doing, and improve my bash.

The latest version available here: https://github.com/ianmiell/cheapci

I reproduce a modified cut of the code here with annotations. As with every
listing in this course, I recommend typing the code (minus the comments if you
prefer!) out to get a feel for the flow of the code.

=== Annotated code


TODO: annotate script 


Here is the code with annotations:

----
#!/bin/bash

# Options are placed right at the top.
set -o pipefail
set -o errunset

# Set up defaults to sensible values.
FORCE=0
VERBOSE=0
REPO=""
EMAIL=""
NAME="ci"
TEST_DIR="."
TEST_COMMAND="./test.sh"
MAIL_CMD="mail"
MAIL_CMD_ATTACH_FLAG="-A"
MAIL_CMD_RECIPIENTS_FLAG="-t"
MAIL_CMD_SUBJECT_FLAG="-s"
PRE_SCRIPT="/bin/true"
POST_SCRIPT="/bin/true"
TIMEOUT_S=86400

# Set up the 'PAGER' variable, defaulting to 'more' in case it is unset in the
# environment.
PAGER=${PAGER:more}

# 'show_help' is a function that sends useful help to the standard output.
# I put it in a function in case it might be called from more than one place
# in the script.
function show_help() {
	cat > /dev/stdout << END
$0 -r <repo> -l <local_checkout> [-q <pre-script>] [-w <post-script>]
   [-m <email>] [-a <mail command>] [-t <mail command attach flag>]
   [-s <mail command subject flag] [-e <recipients flag>] [-n name] [-d <dir>] 
   [-c <command>] [-f] [-v] [-h]

REQUIRED ARGS:
-r - git repository, eg https://github.com/myname/myproj (required)
-l - local checkout of code (that gets updated to determine whether a run is needed) (required)

OPTIONAL ARGS:
-q - script to run just before actually performing test (default ${PRE_SCRIPT})
-w - script to run just after actually performing test (default ${POST_SCRIPT})
-m - email address to send to using "mail" command (default logs to stdout)
-a - mail command to use (default=${MAIL_CMD})
-n - name for ci (unique, must be a valid directory name), eg myproj (default=${NAME})
-d - directory within repository to navigate to (default=${TEST_DIR})
-c - test command to run from -d directory (default=${TEST_COMMAND})
-t - attach argument flag for mail command (default=${MAIL_CMD_ATTACH_FLAG}, empty string means no-attach)
-s - subject flag for mail command (default=${MAIL_CMD_RECIPIENTS_FLAG})
-e - recipients flag (default=${MAIL_CMD_RECIPIENTS_FLAG}, empty string means no flag needed)
-f - force a run even if repo has no updates (default off)
-v - verbose logging (default off)
-i - timeout in seconds (default 86400, ie one day, does KILL one hour after that)
-h - show help

EXAMPLES

- "Clone -r https://github.com/ianmiell/shutit.git if a git pull on /space/git/shutit indicates there's been an update.
  Then navigate to test, run ./test.sh and mail ian.miell@gmail.com if there are any issues"

  ./cheapci -r https://github.com/ianmiell/shutit.git -l /space/git/shutit -d test -c ./test.sh -m ian.miell@gmail.com


- "Run this continuously in a crontab."

  Crontab line:

  * * * * * cd /path/to/cheapci && ./cheapci -r https://github.com/ianmiell/shutit.git -l /space/git/shutit -d test -c ./test.sh -m ian.miell@gmail.com
END
}

# Next we gather options that were passed in from the command line. Do you know
# what the ':'s and '?' symbols mean below?
while getopts "h?vfm:n:d:r:l:c:a:q:w:t:e:s:" opt
do
	case "$opt" in
	h|\?)
		show_help
		exit 0
		;;
	v) VERBOSE=1 ;;
	f) FORCE=1 ;;
	r) REPO=$OPTARG ;;
	m) EMAIL=$OPTARG ;;
	n) NAME=$OPTARG ;;
	d) TEST_DIR=$OPTARG ;;
	l) LOCAL_CHECKOUT=$OPTARG ;;
	c) TEST_COMMAND=$OPTARG ;;
	a) MAIL_CMD=$OPTARG ;;
	q) PRE_SCRIPT=$OPTARG ;;
	w) POST_SCRIPT=$OPTARG ;;
	a) MAIL_CMD=$OPTARG ;;
	t) MAIL_CMD_ATTACH_FLAG=$OPTARG ;;
	e) MAIL_CMD_RECIPIENTS_FLAG=$OPTARG ;;
	s) MAIL_CMD_SUBJECT_FLAG=$OPTARG ;;
	i) TIMEOUT_S=$OPTARG ;;
	esac
done

# This line 'shifts' all the arguments off the command. The 'OPTIND' variable
# contains the number of options found by getopts.
shift "$((OPTIND-1))"

# We require that the git REPO variable is set up by this point, so if it is
# not, then we show the help and exit with a non-zero code to show that the
# run did not complete successfully.
if [[ ${REPO} = "" ]]
then
	show_help
	exit 1
fi

# Rather than set xtrace on every time, we set it on only if the verbose flag
# was used.
if [[ ${VERBOSE} -gt 0 ]]
then
	set -x
fi

#TODO from here
BUILD_DIR_BASE="/tmp/${NAME}"
BUILD_DIR="${BUILD_DIR_BASE}/${NAME}_builddir"
mkdir -p "${BUILD_DIR}"
LOG_FILE="${BUILD_DIR}/${NAME}_build_${RANDOM}.log.txt"
BUILD_LOG_FILE="${BUILD_DIR}/${NAME}_build.log.txt"
LOCK_FILE="${BUILD_DIR}/${NAME}ci.lck"

function cleanup() {
	rm -rf "${BUILD_DIR:?}"/"${NAME}"
	rm -f "${LOCK_FILE}"
	# get rid of /tmp detritus, leaving anything accessed 2 days ago+
	find "${BUILD_DIR_BASE}"/* -type d -atime +1 | rm -rf
	echo "cleanup done"
}

trap cleanup TERM INT QUIT

function send_mail() {
	msg=$1
	if [[ ${LOG_FILE} != '' ]] && [[ ${MAIL_CMD_ATTACH_FLAG} != '' ]]
	then
		log_file_arg=(${MAIL_CMD_ATTACH_FLAG} ${LOG_FILE})
	fi
	if [[ ${EMAIL} != "" ]] && [[ ${MAIL_CMD} != "" ]]
	then
		echo "${msg}" | ${MAIL_CMD} "${MAIL_CMD_SUBJECT_FLAG}" "${msg}" "${log_file_arg[@]}" "${MAIL_CMD_RECIPIENTS_FLAG}" "${EMAIL}"
	else
		echo "${msg}"
	fi
}

date 2>&1 | tee -a "${BUILD_LOG_FILE}"

# Lockfile
if [[ -a ${LOCK_FILE} ]]
then
	echo "Already running" | tee -a "${BUILD_LOG_FILE}"
	exit 
else
	touch "${LOCK_FILE}"
	# Fetch changes
	pushd "${LOCAL_CHECKOUT}"
	git fetch origin master 2>&1 | tee -a "${BUILD_LOG_FILE}"
	# See if there are any incoming changes
	updates=$(git log HEAD..origin/master --oneline | wc -l)
	echo "Updates: ${updates}" | tee -a "${BUILD_LOG_FILE}"
	if [[ ${updates} -gt 0 ]] || [[ ${FORCE} -gt 0 ]]
	then
		touch "${LOG_FILE}"
		pushd "${LOCAL_CHECKOUT}"
		echo "Pulling" | tee -a "${LOG_FILE}"
		git pull origin master 2>&1 | tee -a "${LOG_FILE}"
		popd
		# This won't exist in a bit so no point pushd'ing
		pushd "${BUILD_DIR}"
		# Clone to NAME
		git clone "${REPO}" "${NAME}"
		popd
		${PRE_SCRIPT} 2>&1 | tee -a "${LOG_FILE}"
		EXIT_CODE="${?}"
	        if [[ ${EXIT_CODE} -ne 0 ]]
		then
			msg="ANGRY ${NAME} on $(hostname)"
		fi
		pushd "${BUILD_DIR}"/"${NAME}"/"${TEST_DIR}"
		timeout "${TIMEOUT_S}" "${TEST_COMMAND}" 2>&1 | tee -a "${LOG_FILE}"
		EXIT_CODE=$?
		popd
	        if [[ ${EXIT_CODE} -ne 0 ]]
		then
			if [[ ${EXIT_CODE} -eq 124 ]]
			then
				msg="ANGRY (TIMEOUT) ${NAME} on $(hostname)"
			else
				msg="ANGRY ${NAME} on $(hostname)"
			fi
		else
			msg="HAPPY ${NAME} on $(hostname)"
		fi
		${POST_SCRIPT} 2>&1 | tee -a "${LOG_FILE}"
		EXIT_CODE=$?
	        if [[ ${EXIT_CODE} -ne 0 ]]
		then
			msg="ANGRY ${NAME} on $(hostname)"
		fi
		send_mail "${msg}"
	fi
	cleanup
fi
----

=== What You Learned

TODO

=== Cleanup

TODO

=== Exercises

1) Find improvements to 'cheapci' and submit them as pull requests. If you're
not familiar with the pull request process, then create an account on GitHub
and suggest your change by adding an 'issue' and filling out the form (TODO
link)
