== Debugging Bash Scripts

There are a few useful techniques worth knowing to help debug your bash scripts.
While covering some of these here, you will also learn how to make your bash
scripts more robust and less prone to failure.

=== Syntax Checking Options

Start by creating this simple script:

----
$ mkdir -p lbthw_debugging
$ cd lbthw_debugging
$ cat > debug_script.sh << 'END'
#!/bin/bash

A=some value
echo "${A}
echo "${B}"
END
----

Now run it with the -n flag. This flag only parses the script, rather than
running it. It's useful for detecting basic syntax errors.

----
$ bash -n debug_script.sh
----

You can see it's broken. Fix it. Then run it:

----
$ bash debug_script.sh
----

Now run with '-v' to see the verbose output.

----
$ bash -v debug_script.sh
----

Try tracing to see more details about what's going on. Each statement gets a
new line.

----
$ bash -x debug_script.sh
----

Using these flags together can help debug scripts where there is an elementary
error, or even just working out what's going on when a script runs. I used it
only yesterday to figure out why a systemctl service wasn't running or logging.


=== Managing Variables

Variables are a core part of most serious bash scripts (and even one-liners!),
so managing them is another important way to reduce the possibility of your
script breaking.

Change your script to add the 'set' line immediately after the first line and
see what happens.

----
#!/bin/bash
set -o nounset

A="some value"
echo "${A}
echo "${B}"
----

Now research what the 'nounset' option does. Which 'set' flag does this 
correspond to?

Without running this, try and figure out what this script will do. Will it
run?

----
#!/bin/bash
set -o nounset

A="some value"
B=
echo "${A}"
echo "${B}"
----

I always set 'nounset' on my scripts as a habit. It can catch many problems
before they become serious.

=== Tracing Variables

If you are working with a particularly complex script, then you can get to the
point where you are unsure what happened to a variable.

Try running this script and see what happens:

----
#!/bin/bash
set -o nounset

trap 'echo "${BASH_SOURCE}>A \$A= \"${A}\" ${LINENO}"' DEBUG
declare -t A="some value"
B=
echo "${A}"
A="another value"
echo "${A}"
echo "${B}"
----

Now fix it.

Can you work out what is going on? You may need to refer to the bash man page,
and make sure you understand quoting in bash properly.

The '-t' flag to declare 'traps' when the variable is referenced or assigned to.



=== Profiling Bash Scripts

Returning to the 'xtrace' (or set -x) flag, we can exploit its use of a PS
variable to implement the profiling of a script:

----
#!/bin/bash
set -o nounset
set -o xtrace
declare A="some value"
PS4='$(date "+%s%N")'
B=
echo "${A}"
A="another value"
echo "${A}"
echo "${B}"
ls
pwd
curl -q bbc.co.uk
----

----
NOTE: If you are on a Mac, then you might only get second-level granularity TODO





//http://stackoverflow.com/questions/4336035/performance-profiling-tools-for-shell-scripts


=== Shellcheck

Finally, here is a very useful tip for understanding bash more deeply and
improving any bash scripts you come across. Shellcheck is a website
(http://www.shellcheck.net/) and a package that gives you advice to help fix
and improve your shell scripts. Very often, its advice has prompted me to
research more deeply and understand bash better.

Here is some example output from a script I found on my laptop:

----
$ shellcheck shrinkpdf.sh
In shrinkpdf.sh line 44:
	  -dColorImageResolution=$3		\
                                 ^-- SC2086: Double quote to prevent globbing and word splitting.


In shrinkpdf.sh line 46:
	  -dGrayImageResolution=$3		\
                                ^-- SC2086: Double quote to prevent globbing and word splitting.


In shrinkpdf.sh line 48:
	  -dMonoImageResolution=$3		\
                                ^-- SC2086: Double quote to prevent globbing and word splitting.


In shrinkpdf.sh line 57:
	if [ ! -f "$1" -o ! -f "$2" ]; then
                       ^-- SC2166: Prefer [ p ] || [ q ] as [ p -o q ] is not well defined.


In shrinkpdf.sh line 60:
	ISIZE="$(echo $(wc -c "$1") | cut -f1 -d\ )"
                      ^-- SC2046: Quote this to prevent word splitting.
                      ^-- SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.


In shrinkpdf.sh line 61:
	OSIZE="$(echo $(wc -c "$2") | cut -f1 -d\ )"
                      ^-- SC2046: Quote this to prevent word splitting.
                      ^-- SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.
----

The most common reminders are regarding potential quoting issues, but you can 
see other useful tips in the above output, such as preferred arguments to the
test construct, and advice on 'useless' echo's.


=== Cleanup

To clean up the above work:

----
$ cd ..
$ rm -rf lbthw_debugging
----

=== What You Learned

In this section, you learned about the bash flags useful for debugging, how to
use traps and declare to trace the use of variables, making your scripts more 
robust with nounset, and using shelltrace to help you reduce the risk of your
scripts failing.

=== Exercises

1) Find a large bash script on a social coding site such as GitHub, and run
shellcheck over it. Contribute back any improvements you find.

