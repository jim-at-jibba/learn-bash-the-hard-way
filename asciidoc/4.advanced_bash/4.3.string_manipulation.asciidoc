=== String Manipulation

Since so much of working in bash is related to files and strings of text, the
ability to manipulate strings is valuable.

While tools such as sed, awk, perl (and many many others) are well worth
learning, in this section I want to show you what is possible in bash - and it
may be more than you think!


==== String Length

One of the most common requirements when working with strings is to determine
length:

----
$ mkdir lbthw_strings
$ cd lbthw_strings
$ A='12345678901234567890'
$ echo "${#A}"
$ echo "$#A"
----


Why did the second one not 'work'?



==== String Editing

Bash provides a way to extract a substring from a string. The following example
expains how to parse n characters starting from a particular position.

Work out what's going on here. You may need to consult the manual:

----
$ echo ${A:2}
$ echo ${A:2:3}
----

You can replace sections of scripts using search and replace. The first part
enclosed in '/' signs represents what's searched for, and the second what is
replaced:

----
$ echo "${A/234/432}"
$ echo "${A//234/432}"
----



What's going on in the second command above? How does it differ from the first?


==== Extglobs and removing text

A more advanced means of working with strings is possible by using bash's
extglobs functionality.

A word of warning here: although this functionality is useful to know, it is
arguably less useful than learning the programs 'sed' and 'perl' for this
purpose. It's also quite confusing to have this extra type of glob syntax to
learn in addition to regular expressions (and there's even flavours of those
too!).


----
shopt -s extglob
A="12345678901234567890"
B="  ${A}  "
----

You've ensured that the 'extglob' option is on, and created a new variable 'B',
which is 'A' with two spaces in front and behind. The pipe ('|') character is
used in the echo output to show where the spaces are.

----
echo "B      |${B}|"
echo "B#+( ) |${B#+( )}|"
echo "B#?( ) |${B#?( )}|"
echo "B#*( ) |${B#\*( )}|"
echo "B##+( )|${B##+( )}|"
echo "B##*( )|${B##*( )}|"
echo "B##?( )|${B##?( )}|"
----

Using the bash man page, and experimenting, can you figure out the differences
between the above extglobs? They are:

- ?( )
- +( )
- *( )

Now try '%'s instead of '#'s above. What happens?

One potentially handy application of this is when having to remove leading zeroes from dates:

----
TODAY=$(date +%j)
TODAY=${TODAY##+(0)}
----

Remember: # to the left, % to the right on a (US) keyboard. Or 'hash' is before
'per cent' in the alphabet.


==== Quoting Hell

Quoting - as I'm sure you've seen - can get very complicated in bash very
quickly.

Try this:

----
$ echo 'I really want to echo $HOME and I can't avoid it'
----

Uh-oh. You're now stuck.

Can you see why?

Hit CTRL-c to get out of it.

So you might think to try this:

----
$ echo "I really want to echo $HOME and I can't avoid it"
----

but this time the $HOME variable is evaluated and the output is not what is
wanted.

Try this:

----
$ echo 'I really want to echo $HOME and I can'"'"'t avoid it'
----

That works. Remember this trick as it can save you a lot of time!



==== Cleanup

----
$ cd ..
$ rm -rf lbthw_strings
----

==== What You Learned

This section taught you about string management using pure bash. This is a 
relatively rare field to cover, but worth having seen in case you come across
it. You learned:

- How to edit strings using pure bash

- How to determine string length

- What extglobs are and how you can use them

- How to avoid common quoting problems



==== Exercises

1) Learn how to do all of the above things in sed too. This will take some research and time.

2) Learn how to do all of the above in perl. This will also take some research and time!

3) Construct a useful echo that has a double-quoted string with a single-quoted string inside, eg one that outputs:

He said 'I thought she'd said "bash was easy when $$$$s are involved" but that can't be true!'


