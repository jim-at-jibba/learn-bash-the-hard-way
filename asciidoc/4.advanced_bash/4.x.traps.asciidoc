== Traps and Signals

Signals are a fundamental part of Linux processes. Signals (as the name
suggests) are a way for simple messages to be sent to processes.

=== Triggering signals

Any easy way to trigger a signal is one you will likely already have used.

Follow the instructions here:

----
$ sleep 100
[NOW HIT CTRL, HOLD IT DOWN AND THEN HIT C (CTRL-c)]
$ echo $?
----

You should have got the output of a number over 130. You will of course remember
that '$?' is a special variable that gives the exit code of the last-run
command.

What you are less likely to have remembered is that exit codes over 128 indicate
that a signal triggered the exit, and that to determine the signal number you
take 128 away from the number you saw.

Bonus points if you did remember!

The signals are usually documented in the 'signal' man page.

----
$ man signal
$ man 7 signal
----

====
'man' pages have different sections. 'man man' will explain more if you're
interested, but to get a specific section, you put the number in the middle, as
above. Find out what section 7 is.
====

If the signals are not listed on the man pages on your machine, then google
them!

Now figure out what the signal was, what the default action is for that signal
and the signal name that is triggered when you git CTRL-c.

----
$ sleep 100
[NOW HIT CTRL, HOLD IT DOWN AND THEN HIT Z (CTRL-z)]
$ echo $?
----

Which signal does CTRL-z trigger?

=== kill

Another way to send a signal to a process is another one you have also likely
come across: the 'kill' command.

The 'kill' command is misnamed, because it needn't be used to terminate a
process. By default, it sends the signal 15 (TERM), which (similar to 2) usually
has the effect of terminating the program, but as the name suggests, is a 
stronger signal to terminate than 'INT'errupt.

----
$ sleep 100 &
$ KILLPID=$(echo ${!})
$ echo $KILLPID
$ kill -2 $KILLPID
$ echo $?
----

====
The curly braces are required here (which surprised me!), otherwise bash
interprets the '!' as being a history command (try it!). I'm not sure why (it
works fine outside the '$()'), but it is an indication that it's perhaps wise to
get into the habit of putting curly braces around your variable names in bash.
====

Can you explain why the final echo outputs 0 and not 130?

TODO: Can we get the 


=== Trapping Signals

TODO advanced traps - trap all



=== Trap Exit

TODO advanced traps - trap all

TODO trap EXIT and kill -9

//traps and signals                                                                                                                                                                                 
// http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html   


=== What You Learned

TODO

=== Exercises

1) TODO
