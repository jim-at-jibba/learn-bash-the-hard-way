=== Exit Codes

Now that you know about tests and special parameters in bash, a crucial and
related thing to understand is exit codes.

==== What Is An Exit Code?

When you run a command, function or builtin, a special variable is set that
tells you what the result of that command was. If you're familiar with HTTP
codes like 200 or 404, it's a similar concept to that.

Take a simple example:

----
1$ ls
2$ echo $?
3$ doesnotexist
4$ echo $?
----

When that special variable is set to '0' it means that the command completed
successfully.

You should be able to follow what is going on here at this point:

----
5$ bash
6$ function trycmd {
	$1
	if [[ $? -eq 127 ]]
	then
		echo 'What are you doing?'
	fi
}
7$ trycomd ls
8$ trycmd doesnotexist
9$ exit
----

You can easily write tests to use exit codes for various ends like this.

==== Standard Exit Codes

There are guidelines for exit codes for those that want to follow standards.

TODO Have a look at:

http://www.tldp.org/LDP/abs/html/exitcodes.html

and write up.

==== Tests and Exit Codes

So far so simple, but unfortunately (and because they are useful) exit codes can
be used for many different reasons, not just to tell you whether the command
completed successfully or not. Just as with exit codes in HTTP, the application
can use exit codes to indicate something went wrong, or it can return a '200 OK'
and give you a message directly.

Try to predict the output of this:

----
10$ echo 'grepme' > afile.txt
11$ grep not_there afile.txt
12$ echo $?
----

Did you expect that? grep finished successfully (there was no segmentation
fault, memory, it was not killed etc..) but no lines were matched to it returned
'1' as an exit code.

In one way this is great because you can write tests like this:

----
13$ if [[ grep grepme afile.txt ]]
then
	echo 'matched!'
fi
----

On the other hand, it means that you cannot be sure about what an exit code
might mean about a particular program's termination. I have to look up the grep
exit code every time, and if I use a program's exit code I make sure to do a
few tests first to be sure I know what is going to happen!


==== Setting Your Own Exit Code

If you are writing a script or a function, you can set the exit code by using
the 'return' builtin.

Type this:

----
14$ bash
15$ function trycmd {
	$1
	if [[ $? -eq 127 ]]
	then
		echo 'What are you doing?'
		return 1
	fi
}
16$ trycmd ls
17$ trycmd doesnotexit
18$ exit
----


==== Other Special Parameters

The variable '$?' is an example of a 'special parameter'. I'm not sure why they
are called 'special parameters' and not 'special variables', but it is perhaps
to do with the fact that they are considered alongside the normal parameters of
functions and scripts ($1,$2 etc) as automatically assigned variables within
a context.

Two of the most important are used in the below listing. Figure out what they are:

----
19$ ps -ef | grep bash | grep $$
20$ sleep 999 &
21$ echo $!
----

If you're still stuck, have a look at the bash man page...


===== Cleanup

Now clean up what you just did:

----
22$ rm afile.txt
----


==== What You Learned

- What an exit code is
- Some standard exit codes and their significance
- How tests and exit codes work together
- Some special parameters

==== What Next?

TODO

==== Exercises

1) Look up under what circumstances git returns a non-zero exit code.

2) Look up all the 'special parameters' and see what they do. Play with them. Research under what circumstances you might want to use them.

