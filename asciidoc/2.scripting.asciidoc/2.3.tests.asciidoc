       test expr
       [ expr ]
              Return a status of 0 or 1 depending on the evaluation of the conditional expression expr.  Each operator and operand must be a
              separate argument.  Expressions are composed of the primaries described above under CONDITIONAL EXPRESSIONS.   test  does  not
              accept any options, nor does it accept and ignore an argument of -- as signifying the end of options.

              Expressions may be combined using the following operators, listed in decreasing order of precedence.
              ! expr True if expr is false.
              ( expr )
                     Returns the value of expr.  This may be used to override the normal precedence of operators.
              expr1 -a expr2
                     True if both expr1 and expr2 are true.
              expr1 -o expr2
                     True if either expr1 or expr2 is true.

              test and [ evaluate conditional expressions using a set of rules based on the number of arguments.

              0 arguments
                     The expression is false.
              1 argument
                     The expression is true if and only if the argument is not null.
              2 arguments
                     If  the  first argument is !, the expression is true if and only if the second argument is null.  If the first argument
                     is one of the unary conditional operators listed above under CONDITIONAL EXPRESSIONS, the expression  is  true  if  the
                     unary test is true.  If the first argument is not a valid unary conditional operator, the expression is false.
              3 arguments
                     If  the  second  argument  is  one  of the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the
                     result of the expression is the result of the binary test using the first and third  arguments  as  operands.   If  the
                     first  argument  is !, the value is the negation of the two-argument test using the second and third arguments.  If the
                     first argument is exactly ( and the third argument is exactly ), the result is the  one-argument  test  of  the  second
                     argument.  Otherwise, the expression is false.  The -a and -o operators are considered binary operators in this case.
              4 arguments
                     If the first argument is !, the result is the negation of the three-argument expression composed of the remaining argu-
                     ments.  Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above.
              5 or more arguments
                     The expression is parsed and evaluated according to precedence using the rules listed above.


[[ expression ]]
       Return a status of 0 or 1 depending on the evaluation of the conditional expression expression.  Expressions are  composed  of the  primaries  described below under CONDITIONAL EXPRESSIONS.  Word splitting and pathname expansion are not performed on the words between the [[ and ]]; tilde expansion, parameter and variable expansion, arithmetic expansion,  command  substitution, process  substitution, and quote removal are performed.  Conditional operators such as -f must be unquoted to be recognized as primaries.
       When the == and != operators are used, the string to the right of the operator is considered a pattern and  matched  according to the rules described below under Pattern Matching.  If the shell option nocasematch is enabled, the match is performed without regard to the case of alphabetic characters.  The return value is 0 if the string matches (==) or does not match (!=) the pattern, and 1 otherwise. Any part of the pattern may be quoted to force it to be matched as a string.
     An additional binary operator, =~, is available, with the same precedence as == and !=. When it is used, the string to the right of the operator is considered an extended regular expression and matched accordingly (as in regex(3)). The return value is 0 if the string matches the pattern, and 1 otherwise. If the regular expression is syntactically incorrect, the condi- tional expression's return value is 2. If the shell option nocasematch is enabled, the match is performed without regard to the case of alphabetic characters. Substrings matched by parenthesized subexpressions within the regular expression are saved in the array variable BASH_REMATCH. The element of BASH_REMATCH with index 0 is the portion of the string matching the entire regular expression. The element of BASH_REMATCH with index n is the portion of the string matching the nth parenthesized subexpression.

       Expressions may be combined using the following operators, listed in decreasing order of precedence:

       ( expression )
              Returns the value of expression.  This may be used to override the normal precedence of operators.
       ! expression
              True if expression is false.
       expression1 && expression2
              True if both expression1 and expression2 are true.
       expression1 || expression2
              True if either expression1 or expression2 is true.

       The && and || operators do not evaluate expression2 if the value of expression1 is sufficient to determine the return value of
       the entire conditional expression.

