=== The 'set' Builtin

When using bash it is very important to understand what options are set, and how this can affect the running of your scripts.

In this section you will become familiar with the 'set' builtin, which allows you to manipulate these options within your scripts.

==== Running 'set'

You start by running 'set' on its own:

----
1$ set
----

This will produce a stream of output that represents the state of your shell.  In the normal case, you will see all the variables and functions set in your environment.

But my bash man page says:

[quote,bash man page]
____
Without options, the name and value of each shell variable are displayed in a format that can be reused as input for setting or resetting the currently-set variables. Read-only variables cannot be reset. In posix mode, only shell variables are listed.
____

====
The **Portable Operating System Interface**(**POSIX**) is a family of https://en.wikipedia.org/wiki/Standardization[standards] specified by the https://en.wikipedia.org/wiki/IEEE_Computer_Society[IEEE Computer Society] for maintaining compatibility between https://en.wikipedia.org/wiki/Operating_system[operating systems].
====

Can you work out from your 'set' output whether you are in posix mode?

It is likely that you are not. If so, type:

----
2$ bash
3$ set -o posix
4$ set
5$ exit
----

and you will observe that the output no longer has functions in it. The '-o' switched on the 'posix' option in your bash shell. The same command with '+o' will switch it off. I have trouble remembering which is 'on' and which is 'off' every time!

====
If you did not have functions, then either no functions were set, or you were in posix mode already!
====

The commands above put you in a fresh bash shell so that we would revert to the previous state.

To show how all your options are set type this:

----
6$ set -o
----

and you will see the current state of all your options.

What you see are all the options bash can set. One of the exercises below is to try to understand what they all mean, but in this section we're only going to focus on a couple that I use all the time.

==== 'set' vs 'env'

One thing that can confuse people is that the output of 'set' is similar to the output of 'env', but different.

----
7$ set
8$ env
----

The difference is that _exported_ variables are shown by env, not all the variables set in the shell.


==== Useful Options for Scripting

Where set becomes really useful to understand is in scripting.

For example, I set these two up every time I start writing a shell script:

----
9$ set -o errexit
10$ set -o xtrace
----

Although you don't need to be in a script for them to work.

The errexit option tells bash to exit the script if any command fails.

The xtrace option outputs the

Type this is to see how this works in practice:

----
11$ echo '#!/bin/bash
set -o errexit
set -o xtrace
pwd
cd $HOME
cd -
false
echo "should not get here"' > ascript.sh
12$ chmod +x ascript.sh
13$ ./ascript.sh
----

You should be able to explain the output of the above.

===== Flags With 'set' Instead of Names

For each 'set' option, you can use a flag instead. For example, this:

----
14$ set -e
15$ set -x
----

is the same as:

----
16$ set -o errexit
17$ set -o xtrace
----

I generally prefer the name form rather than flag, just because it's easier to read.

When I start writing a script, I usually start with the following:

----
#!/bin/bash

set -o errexit
set -o xtrace
set -o unset

[...]
----

The 'unset' throws an error if a variable is unset when referenced. (The special variables $@ and $* are exempt).

==== The 'pipefail' Option, Exit Codes and Pipelines

One option worth mentioning (as it is frequently referred to) is the pipefail option:

----
18$ set -o pipefail
18$ grep notthere afile.txt | xargs echo
19$ echo $?
20$ set +o pipefail
21$ grep notthere afile.txt | xargs echo
22$ echo $?
----

One of the above yields a '0' exit code, and the other does not. The only difference is the pipefail setting.

When switched on (remember, '-o' is on, '+o' is off - yes, I find it confusing too), the pipefail returns the error code of the last command to return a non-zero status. Since grep returns non-zero even when there's no 'error' as such, you can get surprising behaviour when using pipes and exit codes.

By default, pipefail is off, so the second outcome is the default one.

===== Cleanup

Now clean up what you just did:

----
23$ rm afile.txt
24$ rm ascript.sh
----

==== What You Learned

- What the 'set' builtin is
- How to set an option
- The difference between -o (on) and +o (off)
- Some of the most-used and useful options

==== What Next?

Well done! You've made it to the end of the scripting section. Now you are fully equipped to write and read useful shell scripts.

The next part looks at the most-frequently used idioms and tricks commonly-seen in bash scripts.

==== Exercises

1) Read the man page to see what all the options are. Don't worry if you don't
understand it all yet, just get a feel for what's there.

2) Set up a shell with unique variables and functions and use set to create a script to recreate those items in another shell.
