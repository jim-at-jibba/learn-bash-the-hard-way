=== Tests

Tests are a fundamental part of bash scripting, whether it's on the command line in one-liners or much larger scripts.

The subject is very fiddly and confusing. In this section I'll show you some pitfalls, and give rules of thumb for practical bash usage.

==== What Are Bash Tests?

Tests in bash are constructs that allow you to do conditional expressions. They use the square brackets to enclose what is being tested.

For example, the simplest test might be:

----
1$ [ /bin/false ]
2$ echo $?
----

====
The second command above is a little mystifying at this stage if you've not seen it before. We will cover it in more depth in a section later in this part. For now, all you need to understand is this: the '$?' variable is a special variable that gives you a number telling you whether the last-executed command succeeded or not. If it succeeded, the number will be '0'. If it failed, the number will _not_ be '0'.

'/bin/false' is a program that has one job: to produce a 'failing' exit code. Why would such a thing exist? Well, it's often useful to have a command that you know will fail when you are building or testing a script.

Things get more interesting if you try and compare values in your tests. Think about what this will output before typing it in:

----
3$ A=1
4$ [ $A = 1 ]
5$ echo $?
6$ [ $A == 1 ]
7$ echo $?
8$ [ $A = 2 ]
9$ echo $?
----

A single equals sign works just the same as a double equals sign. Generally I prefer the double one so it does not get confused with variable assignment. TODO TEST THAT

==== What is '[', Really?

It is worth noting that '[' is in fact a builtin, as well as (very often) a program.

----
10$ which [
11$ builtin [
----

... and that '[' and 'test' are synonymous

----
12$ which test
13$ builtin test
----

====
'which' is a program (not a builtin!) that tells you where a program can be found on the system.

This is why a space is required after the '['. It's a separate command and spacing is how bash determines where one command ends and another begins.

==== Logic operators

What do you expect the output of this to be?

----
14$ ( [ 1 = 1 ] || [ ! '0' = '0' ] ) && [ '2' = '2' ]
15$ echo $?
----

Similar to other languages, '!' means 'not', '||' means 'or', '&&' means 'and' and items within '()' are evaluated first.

Note that to combine the  TODO

If you want to do everything in one set of braces, you can run:

----
16$ [  1 = 1 -o  ! '0' = '0'  -a  '2' = '2' ]
17$ echo $?
----

You can use '-o' as an 'or' operator within the square brackets, but you can't use '(' grouping within them.

If you're not confused yet, you might be soon!

==== [[

There is another very similar operator to the 'test' one that has two angle brackets:

----
18$ [[ 1 = 1 ]]
19$ echo $?
----

This confused me a lot for some time! What's the difference between then?

The differences between '[[' and '[' are relatively subtle. Type these lines to see examples: TODO

----
21$ [ ${DOESNOTEXIST} = '' ]
22$ echo $?
23$ [[ ${DOESNOTEXIST} = '' ]]
24$ echo $?
25$ [ x${DOESNOTEXIST} = 'x' ]
26$ echo $?
----

TODO: elucidate

You frequently come across code like this:

----
27$ [ "x$DOESNOTEXIST" = "x" ]
----

So '[[' can handle some edge cases when using '[', but it is a bit confusing. You don't actually need the 'x' because the quotes take care of it, but the rules are so complicated people write it as a superstition.

Once again, you can see understanding how quotes work is critical to bash mastery!

Oh, and '[[' doesn't like the '-a' (and) and '-o' (or) operators.

====
If you want to understand more, follow [this link](http://serverfault.com/questions/52034/what-is-the-difference-between-double-and-single-square-brackets-in-bash)


==== Confused?

You're not alone. In practice, I follow most style guides and always use '[[' until there is a good reason not to.

If I come across some tricky logic in code I need to understand, I just look it up there and then.

==== -a etc

TODO

==== Types

NUMBERS vs STRINGS

==== if


==== What You Learned

1) TODO

==== What Next?                                                                                                                                             
                                                                                                                                                            
TODO

==== Exercises

1) TODO
