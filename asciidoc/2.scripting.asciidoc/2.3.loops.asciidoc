       for (( expr1 ; expr2 ; expr3 )) ; do list ; done
              First, the arithmetic expression expr1 is evaluated according to the rules described below under ARITHMETIC  EVALUATION.   The
              arithmetic  expression expr2 is then evaluated repeatedly until it evaluates to zero.  Each time expr2 evaluates to a non-zero
              value, list is executed and the arithmetic expression expr3 is evaluated.  If any expression is omitted, it behaves as  if  it
              evaluates  to  1.   The  return  value is the exit status of the last command in list that is executed, or false if any of the
              expressions is invalid.

       for name [ in word ] ; do list ; done
              The list of words following in is expanded, generating a list of items.  The variable name is set to each element of this list
              in turn, and list is executed each time.  If the in word is omitted, the for command executes list once  for  each  positional
              parameter that is set (see PARAMETERS below).  The return status is the exit status of the last command that executes.  If the
              expansion of the items following in results in an empty list, no commands are executed, and the return status is 0.


       select name [ in word ] ; do list ; done
              The list of words following in is expanded, generating a list of items.  The set of expanded words is printed on the  standard
              error,  each  preceded  by a number.  If the in word is omitted, the positional parameters are printed (see PARAMETERS below).
              The PS3 prompt is then displayed and a line read from the standard input.  If the line consists of a number  corresponding  to
              one  of  the displayed words, then the value of name is set to that word.  If the line is empty, the words and prompt are dis-
              played again.  If EOF is read, the command completes.  Any other value read causes name to be set to null.  The line  read  is
              saved in the variable REPLY.  The list is executed after each selection until a break command is executed.  The exit status of
              select is the exit status of the last command executed in list, or zero if no commands were executed.

       case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac
              A case command first expands word, and tries to match it against each pattern in turn, using the same matching  rules  as  for
              pathname  expansion (see Pathname Expansion below).  The word is expanded using tilde expansion, parameter and variable expan-
              sion, arithmetic substitution, command substitution, process  substitution  and  quote  removal.   Each  pattern  examined  is
              expanded  using  tilde expansion, parameter and variable expansion, arithmetic substitution, command substitution, and process
              substitution.  If the shell option nocasematch is enabled, the match is performed without regard to  the  case  of  alphabetic
              characters.   When  a  match  is  found, the corresponding list is executed.  After the first match, no subsequent matches are
              attempted.  The exit status is zero if no pattern matches.  Otherwise, it is the exit status of the last command  executed  in
              list.

       while list; do list; done
       until list; do list; done
              The while command continuously executes the do list as long as the last command in list returns an exit status of  zero.   The
              until  command is identical to the while command, except that the test is negated; the do list is executed as long as the last
              command in list returns a non-zero exit status.  The exit status of the while and until commands is the  exit  status  of  the
              last do list command executed, or zero if none was executed.

$ select a in a b c
> do
> echo asd
> done
1) a
2) b
3) c
#? 2
asd

