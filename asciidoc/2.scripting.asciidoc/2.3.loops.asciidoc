=== Loops

Like almost any programming language, bash has loops. 

In this section you will cover for loops, case statements, and while loops in bash.


==== 'for' Loops
//TODO
// for name [ in word ] ; do list ; done
//The list of words following in is expanded, generating a list of items. The variable name is set to each element of this list in turn, and list is executed each time. If the in word is omitted, the for command executes list once for each positional parameter that is set (see PARAMETERS below). The return status is the exit status of the last command that executes. If the expansion of the items following in results in an empty list, no commands are executed, and the return status is 0.

----
TODO$ for (( i=0; i < 20; i++ ))
do
  echo $i
  echo $i > file${i}.txt
done
TODO$ ls
----

You just created twenty files, each with a number in them using a 'for' loop in the 'C' language style. Note there's no '$' sign involved in the variable when it's in the double parentheses!


----
TODO$ for f in $(ls *txt)
do
  echo "File $f contains: $(cat $f)"
done
----

It's our old friend the 

This for loop uses the 'in' keyword to separate the variable each iteration will assign to ('f') and the list to take items from. Here bash evaluates the output of the 'ls' command and uses that as the list, but we could have written something like:

----
TODO$ for f in file1.txt file2.txt file3.txt
do 
  echo "File $f contains: $(cat $f)"
done
----

with a similar effect.

There are some shortcuts it's worth knowing about also:



==== 'case' Statements

TODO
 case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac
A case command first expands word, and tries to match it against each pattern in turn, using the same matching rules as for pathname expansion (see Pathname Expansion below). The word is expanded using tilde expansion, parameter and variable expan- sion, arithmetic substitution, command substitution, process substitution and quote removal. Each pattern examined is expanded using tilde expansion, parameter and variable expansion, arithmetic substitution, command substitution, and process substitution. 

If the shell option nocasematch is enabled, the match is performed without regard to the case of alphabetic characters.

When a match is found, the corresponding list is executed. After the first match, no subsequent matches are attempted.

The exit status is zero if no pattern matches. Otherwise, it is the exit status of the last command executed in list.



==== 'while' and 'until'

TODO
 while list; do list; done
 The while command continuously executes the do list as long as the last command in list returns an exit status of zero. The until command is identical to the while command, except that the test is negated; the do list is executed as long as the last command in list returns a non-zero exit status. The exit status of the while and until commands is the exit status of the last do list command executed, or zero if none was executed.

==== What You Learned

TODO

==== What Next?

TODO

==== Exercises

1) TODO
