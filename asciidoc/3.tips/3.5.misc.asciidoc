=== Bash in Practice

So far we've been learning about bash in relatively abstract ways.

In this section you're going to see many of the ideas you've learned put together in more realistic contexts, so you can get a flavour for what bash can do.

You can easily skip this section if you want as nothing here is new, but following this can embed some concepts and keep your motivation going before the final part!


==== Output With Time

Frequently, I want to get the output of a command along with the time. Let's say I'm running vmstat while a server is having problems, and I want to ensure that I've logged the time that vmstat relates to. Type this in:

----
1$ function dateit() {
   while read line
   do
     echo "$line $(date '+ %m-%d-%Y %H:%M:%S')"
   done
}
2$ vmstat 1 | dateit
----


====
'vmstat' is a program available on most Linux flavours that gives you a view of what the system resource usage looks like.
It is not available on Mac OSes. If vmstat does not exist for you, then replace with 'top -s 2' or a similar command.
====

You will see the date appended to each line in the output. Experiment with the function to place the date before the line, or even on a separate line. See also the exercises below.

==== Where Am I?

You're probably familiar with the 'pwd' builtin, which gives you your current working directory (cwd). Similarly, there is an environment variable (PWD) that bash normally sets that stores the cwd.

----
3$ pwd
4$ echo $PWD
----

Very often in scripts, you will want to know where the cwd of the process is.

But also (very often) you will want to know where _the script you are running_ is located _from within the script_.

For example, if you are running a script that is found in your PATH (ie not in your local folder), and you want to refer to another file relative to that script from within that script, then you will need to know where that script is located.

----
5$ cat > /tmp/lbthwscript.sh << 'EOF'
echo My pwd is: $PWD
echo I am running in: $(dirname ${BASH_SOURCE[0]})
EOF
6$ chmod +x /tmp/lbthwscript.sh
7$ /tmp/lbthwscript.sh
----

Have a play with this function to see what it does.

What happens if you cd to /tmp and run it from there? Do you get an absolute path in the second line? What can you do about this?

==== Generic Extract Function

There are a bewildering number of archiving tools. To name a few of the most popular: tarred, zipped, bzipped, gzipped, and compressed.

If you spend any time dealing with these files, then this is a candidate for a time-saving function to put into your startup files.

----
8$ function extract() {
  if [ -z "$1" ]
  then
    echo "Usage: extract <file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f $1 ] ; then
       case $1 in
         *.7z)        7z x $1        ;;
         *.bz2)       bunzip2 $1     ;;
         *.exe)       cabextract $1  ;;
         *.gz)        gunzip $1      ;;
         *.tar.bz2)   tar xvjf $1    ;;
         *.tar.gz)    tar xvzf $1    ;;
         *.tar.xz)    tar xvJf $1    ;;
         *.tar)       tar xvf $1     ;;
         *.tbz2)      tar xvjf $1    ;;
         *.tgz)       tar xvzf $1    ;;
         *.Z)         uncompress $1  ;;
         *.xz)        unxz $1        ;;
         *.lzma)      unlzma $1      ;;
         *.rar)       unrar x -ad $1 ;;
         *.zip)       unzip $1       ;;
         *)           echo "extract: '$1' - unknown archive method" ;;
       esac
    else
        echo "$1 - file does not exist"
    fi
  fi
}
9$ mkdir lbthwmisc
10$ cd lbthwmisc
11$ touch a b c
12$ tar cvfz test.tgz a b c
13$ rm a b c
14$ extract test.tgz
----

//TESTED


==== Output Absolute File Path

Quite often I want to give co-workers an absolute reference on a server to a file that I am looking at. One way to do this is to cut and paste the output of 'pwd', add a '/' to it, and then add the filename I want to share.

This takes a few seconds to achieve, and since it happens regularly, it's a great candidate for a time-saving function:

----
14$ function sharefiles() {
	for file in $(ls "$@"); do
	        echo -n $(pwd)
	        [[ $(pwd) != "/" ]] && echo -n /
	        echo $file
	done
}
15$ sharefiles
----

//TESTED

Saving time by writing a function is often a great idea, but deciding what is worth automating is a non-trivial task.

Here are some things you want to think about when deciding what to automate:

- How often do you perform the task?
- How much effort is it to 
- How easy is it to automate?
- Will the automation require effort to maintain?
- Do you always perform the task on the same machine?
- Do you control that machine?

My experience is that the effects of automation can be very powerful, but the above factors can also limit its power. 

Think about what you could automate today (see exercises)!


==== Cleanup

----
16$ cd ..
17$ rm -rf lbthwmisc
18$ rm /tmp/lbthwscript.sh
----

==== Exercises

1) Look at your history to work out what you do most often at the terminal. Write a function to make these tasks quicker.

2) Change the dateit function so that it outputs the hostname, username of the running user, and the time to millisecond granularity.

3) Extend the 'Where Am I?' function to handle symbolic links. If you don't know what symbolic links are, research them!

4) Extend the archive script to handle files that do not have the appropriate suffix. Hint: you may want to research the 'file' command to achieve this.

