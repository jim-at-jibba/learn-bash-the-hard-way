=== Terminal Codes and Non-Standard Characters

Although not directly related to bash, if you spend any time at a terminal, then it will pay off to understand how the terminal works with non-standard characters.

Non-standard characters are characters like 'tab', 'newline', 'carriage return', and even 'end of file'. They don't form part of words, or necessarily print anything to the screen, but they are interpreted by the shell and the terminal.

In this section you'll:

- Understand how to output anything with echo
- Understand how to output a character while by-passing the terminal
- Learn about carriage returns and newlines and how they are used
- Learn how to use hexdump
- Learn about standard terminal escape codes

====
Focus here is on ANSI-standard escapes. Rarely, you might come across more complex escapes for specific terminal contexts, but this is beyond the scope of a 'practical' guide.
====

==== Non-Printable Characters

The terminal you use has what are described as 'printable' characters, and non-printable characters.

For example, typing a character like 'a' (normally) results in the terminal adding an 'a' to the screen. But there are other characters that tell the terminal to do different things.

It's easy to forget this, but not everything the shell receives is directly printed to the screen. The terminal 'driver' takes what it is given (which is one or more bytes) and decides what to do with it. It might decide to print it (if it's a 'normal' character), or it might tell the computer to emit a beep, or it might change the colour of the terminal, or delete and go back a space, or it might send a message to the running program to tell it to exit.

When looking at odd characters, it's useful to be aware of a couple of utilities that help you understand what's going on. The first of these is a familiar one: echo.

==== Using 'echo'

You're already familiar with echo, but it has some sometimes-useful flags:

----
1$ echo -n 'JUST THESE CHARACTERS'
----

The -n flag tells echo not to print a newline

----
2$ echo -n -e 'JUST THESE CHARACTERS AND A NEWLINE\n'
----

The '-e' makes us sure that the '\n' will create a newline. Most often it's the default anyway.

It is the backslash character '\' that makes echo aware that a special character is coming up.

Other special characters include '\b' (for backspace), '\t' (for tab) and '\\' (to output a backslash):

What do you think this will output?

----
3$ echo -n -e 'a\bb\bcde\bfg\b\b\b\n'
----

You can also send a specific byte value to the terminal by specifying its hex value:

----
4$ echo -n -e '\x20\n'
----

Think about that - you can use echo to control _exactly_ what gets sent to the screen. This is extremely valuable for debugging.

If you want to _prevent_ this behaviour, use the '-E' flag:

----
5$ echo -E -n 'Line1\nLine2' 
----

==== CTRL-v Escaping

Being able to output any binary value to the screen that we choose is useful, but what if we want to just output a 'special' character, and not have the terminal interpret it in any special way?

//http://ss64.com/bash/syntax-keyboard.html

For example, if I hit 'tab' in my terminal it would normally _not_ show a tab character, as the terminal uses the tab key (if hit twice quickly) to auto-complete any text we have not finished (we will cover this later). Try it!

But if I'm typing something like:

----
6$ echo -E 'I want a tab here:>X<a tab'
----

How do I get a tab where the 'X' is?

You do it like this: instead of the 'X', you hold down the 'CTRL' key. Then hold down the 'v' key. Let go of the 'v' key, then tap the 'i' key. Finally, let go of the 'CTRL' key.

Practice that a few times. The pattern is: hit CTRL+v, then CTRL+the character specified (in this case 'i').

This character would normally be represented like this: '^I', the '^' indicating a 'CTRL+V' combination, and the 'I' indicating the CTRL+I combination.

How would you input this, therefore, and what will it output?

----
7$ echo abcc^Hdefg
----

This table is a useful reference for these characters:

[width="100%",options="header,footer"]
|====================
| Name | Hex | C-escape | CTRL-key | Description |  
|  BEL | 0x07 | \a | ^G | Terminal bell |  
|  BS | 0x08 | \b | ^H | Backspace |  
|  HT | 0x09 | \t | ^I | Horizontal TAB |  
|  LF | 0x0A | \n | ^J | Linefeed |
|  VT | 0x0B | \v | ^K | Vertical TAB |
|  FF | 0x0C | \f | ^L | Formfeed |
|  CR | 0x0D | \r | ^M | Carriage return |  
|  ESC | 0x0E | N/A | ^[ | Escape character |  
|  DEL | 0x0F | N/A | N/A | Delete character |  
|====================

There are other interesting CTRL-v escape characters, but they are more rarely used. We won't cover them here.

==== Carriage return vs Line Feeds

The most commonly-seen 

Carriage returns and line feeds cause much confusion, but it doesn't take long to understand the difference and why they are different.

If you think about an old-fashioned typewrite or printer that moves along punching out characters to a page, at some point it has to be told: 'go back to the beginning of the line'. Then, once at the beginning of the line, it has to be told: 'feed the paper up one line so I can start writing my new line'.

A 'carriage return' is, as the word 'return' suggests, 'returns' the cursor to the start of the line. It's represented by the character 'r' for return. The 'line feed', again as the name suggests, feeds the line up. In a modern terminal, this just means 'move the cursor down'.

So far, so clear and simple to learn. But, Linux does things differently! In Linux, '\n' is sufficient to do both. In Windows, you need both characters to represent a new line.

What will this output?

This means that files can 'look funny' in Linux terminals with these weird '^M' characters showing at the end of each line. To confuse things even more, some programs automatically handle the difference for you and hide it from you.

----
8$ echo -e 'Bad magazine\rMad'
----

This is why it's important to have a way to see what the actual bytes in a file are, and where a very useful tool comes in: hexdump.

==== Hexdump

Run this:

----
9$ echo -e 'Bad magazine\rMad' | hexdump
10$ echo -e 'Bad magazine\rMad' | hexdump -c
----

Hexdump prints out the characters received in standard input as hex digits. 16 characters are printed per line, and on the left is displayed the count (also in hex) of the number of bytes processed up to that line.

The -c flag prints out the contents as characters (including the control ones with appropriate backslashes in front, eg '\n', whereas leaving it out just displays the hex values.

It's a great way to see what is _really_ going on with text or any stream of output of bytes.

If you go back to the first example in this section:

----
11$ echo 'JUST THESE CHARACTERS' | hexdump -c
12$ echo -n 'JUST THESE CHARACTERS' | hexdump -c
----

You can figure out for yourself the difference between using the -n flag in echo and not using it.


==== Terminal Escape Codes

Run this:

----
13$ echo -e '\033[?47h'
14$ echo -e '\033[?47l'
----

The first line 'saves' the screen (but does not clear it!) and the second restores it.

These terminal escape codes are standard sequences that tell the terminal to do various things.


The ANSI codes always start with the ESC character and left bracket character: in hex '1B' then '5b', or in octal '033' then ''. So you could rewrite the above as:

----
15$ echo -e '\x1b\x5b?47h'
16$ echo -e '\x1b\133?47l'
----

These characters are then followed by specific sequences which can change the colour of the screen, the background text, the text itself, set the screen width, or even re-map keyboard keys.

Type this out and see if  you can figure out what it's doing as you go:

----
17$ ansi-test() {
for a in 0 1 4 5 7
    do
    echo "a=$a "
    for (( f=0; f<=9; f++ ))
    do
        for (( b=0; b<=9; b++ ))
        do
            echo -ne "\\033[${a};3${f};4${b}m"
            echo -ne "\\\\\\\\033[${a};3${f};4${b}m"
            echo -ne "\\033[0m "
        done
        echo
    done
    echo
done
echo
}
----

That shows you what all the ansi terminal escape codes are and you can see what they do in the terminal.

Sometimes when you 'cat' a binary file, (or /dev/random, which outputs random bytes) the contents when output to a terminal can cause the terminal to appear to 'go haywire'. This is because these escape codes are accidentally triggered by the sequences of bytes that happen to exist in these files.

==== Fun With Terminals

Finally, some (optional) fun which pulls together a few different things you've learned along the way.

Create this as a file called 'shiner', and run it with:

----
sh shiner
----

and remove it afterwards if you like.

----
#!/bin/bash

DATA[0]=" _/ _/ _/ _/ "
DATA[1]=" _/_/_/_/_/ _/_/_/ _/_/_/ _/_/_/ _/_/_/ "
DATA[2]=" _/ _/ _/ _/ _/ _/ _/_/ _/ _/"
DATA[3]="_/_/_/_/_/ _/ _/ _/ _/ _/_/ _/ _/ "
DATA[4]=" _/ _/ _/_/_/ _/_/_/ _/_/_/ _/ _/ "

REAL_OFFSET_X=0
REAL_OFFSET_Y=0

draw_char() {
   V_COORD_X=$1
   V_COORD_Y=$2
   
   tput cup $((REAL_OFFSET_Y + V_COORD_Y)) $((REAL_OFFSET_X + V_COORD_X))
   
   printf %c ${DATA[V_COORD_Y]:V_COORD_X:1}
}

trap 'exit 1' INT TERM
trap 'tput setaf 9; tput cvvis; clear' EXIT

tput civis
clear

while :; do
    for ((c=1; c <= 7; c++)); do
        tput setaf $c
        for ((x=0; x<${#DATA[0]}; x++)); do
        for ((y=0; y<=4; y++)); do
        draw_char $x $y
        done
        done
    done
done
----

==== What You Learned

- What terminal codes are
- What printable and non-printable characters are
- How to output any arbitrary item
- How to prevent the terminal from interpreting the character using CTRL-v
- The difference between '\n' and '\r\n'
- What terminal escape codes are

==== What Next?

Building on this knowledge, next you will learn how to set up your prompt so that it can show you (and even do) useful things.

==== Cleanup

You don't necessarily need to clean up at the end of this section, but your terminal may have inadvertently changed state if input was wrongly made.

If this happens, kill or exit your terminal and restart bash.

==== Exercises

1) Research and echo all of echo's escape sequences. Play with them and figure out what they do.

2) Research and echo 10 terminal escape sequences.

3) Look up all the CTRL-v escape sequences and experiment with them.

4) Research the command 'tput', figure out what it does and rewrite some of the above commands using it.

5) Re-map your keyboard so it outputs the wrong characters using escape codes.
