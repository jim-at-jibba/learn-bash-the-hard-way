   Here Documents
       No parameter expansion, command substitution, arithmetic expansion, or pathname expansion is performed on word.  If any characters in
       word  are quoted, the delimiter is the result of quote removal on word, and the lines in the here-document are not expanded.  If word
       is unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion.  In
       the latter case, the character sequence \<newline> is ignored, and \ must be used to quote the characters \, $, and `.

       If  the redirection operator is <<-, then all leading tab characters are stripped from input lines and the line containing delimiter.
       This allows here-documents within shell scripts to be indented in a natural fashion.


<<

<<-
tabs only ignored at front

<<<

Quotes << 'END'


example:

Step 1:

----
TODO$ function write_file {
	cat > $1 << END
#!/bin/bash
echo $1
END
	chmod +x $1
}
TODO$ write_file echoer
TODO$ ./echoer
----

----
TODO$ function write_file {
	cat > $1 << 'END'
#!/bin/bash
echo $1
END
	chmod +x $1
}
TODO$ write_file echoer
TODO$ ./echoer
----

----
TODO$ function write_file {
	cat > $1 <<- 'END'
		#!/bin/bash
		echo $1
	END
	chmod +x $1
}
TODO$ write_file echoer
TODO$ ./echoer
----

What is END is part of the here doc? No problem if it is not the only thing on the line

----
TODO$ function write_file {
	cat > $1 <<- 'END'
		#!/bin/bash
		echo $1
        echo Is this the END?
	END
	chmod +x $1
}
TODO$ write_file echoer
TODO$ ./echoer




==== What Next?                                                                                                                                             
                                                                                                                                                            
TODO
